// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nest.core.infraestructura.db.DbContext;

#nullable disable

namespace nest.core.security.Migrations
{
    [DbContext(typeof(NestDbContext))]
    [Migration("20241122144916_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "aplicacion-home",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "aplicacion-formulario",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "seguridad-rol",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "seguridad-rol-usuario",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "seguridad-rol-formulario",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "seguridad-usuario",
                            ClaimValue = "true",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "aplicacion-home",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "aplicacion-formulario",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "seguridad-rol",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "seguridad-rol-usuario",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "seguridad-rol-formulario",
                            ClaimValue = "true",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "seguridad-usuario",
                            ClaimValue = "true",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "security");
                });

            modelBuilder.Entity("nest.core.dominio.Aplicacion.Formulario.Formulario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Controlador")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icono")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<short>("Orden")
                        .HasColumnType("smallint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimType")
                        .IsUnique()
                        .HasFilter("[ClaimType] IS NOT NULL");

                    b.HasIndex("ModuloId");

                    b.HasIndex("ParentId");

                    b.ToTable("formulario", "aplicacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            ClaimType = "aplicacion-home",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 61, DateTimeKind.Local).AddTicks(5932),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(7052),
                            Icono = "home",
                            ModuloId = 1,
                            Nombre = "Inicio",
                            NombreCorto = "INICIO",
                            Orden = (short)1
                        },
                        new
                        {
                            Id = 2,
                            Action = "",
                            Controlador = "",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8514),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8515),
                            Icono = "window-restore",
                            ModuloId = 1,
                            Nombre = "Aplicacion",
                            NombreCorto = "APLICACIO",
                            Orden = (short)2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Formulario",
                            ClaimType = "aplicacion-formulario",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8519),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8519),
                            Icono = "table-list",
                            ModuloId = 1,
                            Nombre = "Formulario",
                            NombreCorto = "FORMULARI",
                            Orden = (short)2,
                            ParentId = 2
                        },
                        new
                        {
                            Id = 4,
                            Action = "",
                            Controlador = "",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8522),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8523),
                            Icono = "shield",
                            ModuloId = 1,
                            Nombre = "Seguridad",
                            NombreCorto = "SEGURIDAD",
                            Orden = (short)3
                        },
                        new
                        {
                            Id = 5,
                            Action = "Rol",
                            ClaimType = "seguridad-rol",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8524),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8525),
                            Icono = "users",
                            ModuloId = 1,
                            Nombre = "Rol",
                            NombreCorto = "ROL",
                            Orden = (short)1,
                            ParentId = 4
                        },
                        new
                        {
                            Id = 6,
                            Action = "RolUsuario",
                            ClaimType = "seguridad-rol-usuario",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8532),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8533),
                            Icono = "users",
                            ModuloId = 1,
                            Nombre = "Rol Usuarios",
                            NombreCorto = "ROLUSER",
                            Orden = (short)2,
                            ParentId = 4
                        },
                        new
                        {
                            Id = 7,
                            Action = "RolFormulario",
                            ClaimType = "seguridad-rol-formulario",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8535),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8535),
                            Icono = "users",
                            ModuloId = 1,
                            Nombre = "Rol Formularios",
                            NombreCorto = "ROLFORM",
                            Orden = (short)3,
                            ParentId = 4
                        },
                        new
                        {
                            Id = 8,
                            Action = "Usuario",
                            ClaimType = "seguridad-usuario",
                            Controlador = "Seguridad",
                            Descripcion = "",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8537),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 62, DateTimeKind.Local).AddTicks(8537),
                            Icono = "users",
                            ModuloId = 1,
                            Nombre = "Usuarios",
                            NombreCorto = "USER",
                            Orden = (short)4,
                            ParentId = 4
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Aplicacion.Modulo.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Controlador")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("RutaImagen")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("modulo", "aplicacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Controlador = "Seguridad",
                            Descripcion = "Modulo donde se setean los roles, permisos y menús.",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(7845),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(7850),
                            Nombre = "Seguridad",
                            NombreCorto = "SECURITY",
                            RutaImagen = ""
                        },
                        new
                        {
                            Id = 2,
                            Action = "Index",
                            Controlador = "Logistica",
                            Descripcion = "Modulo de inventarios logistica y transferencias.",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8711),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8711),
                            Nombre = "Logistica",
                            NombreCorto = "LOGISTIC",
                            RutaImagen = ""
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Controlador = "VentasHome",
                            Descripcion = "Modulo de facturacion, ventas, caja.",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8714),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8714),
                            Nombre = "Ventas",
                            NombreCorto = "VENTAS",
                            RutaImagen = ""
                        },
                        new
                        {
                            Id = 4,
                            Action = "Index",
                            Controlador = "Contabilidad",
                            Descripcion = "Modulo de libro diario, asientos, libro mayor.",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8716),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8716),
                            Nombre = "Contabilidad",
                            NombreCorto = "CONTABIL",
                            RutaImagen = ""
                        },
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Controlador = "Produccion",
                            Descripcion = "Modulo de producción, recetas, conversiones.",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8718),
                            FechaModificacion = new DateTime(2024, 11, 22, 9, 49, 16, 63, DateTimeKind.Local).AddTicks(8718),
                            Nombre = "Produccion",
                            NombreCorto = "PRODUCCI",
                            RutaImagen = ""
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Finanzas.Moneda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Simbolo")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Sufix")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("moneda", "finanzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "SOLES",
                            NombreCorto = "PEN",
                            Prefix = "S/",
                            Simbolo = "S/",
                            Sufix = "soles"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "DÓLARES",
                            NombreCorto = "USD",
                            Prefix = "$",
                            Simbolo = "$",
                            Sufix = "dólares"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "EUROS",
                            NombreCorto = "EUR",
                            Prefix = "€",
                            Simbolo = "€",
                            Sufix = "euros"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.General.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("departamento", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Amazonas",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Áncash",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Apurímac",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Arequipa",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Ayacucho",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Cajamarca",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Callao",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Cusco",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Huancavelica",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Huánuco",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Ica",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Junín",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "La Libertad",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Lambayeque",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Lima",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "Loreto",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "Madre de Dios",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "Moquegua",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "Pasco",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 20,
                            Nombre = "Piura",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 21,
                            Nombre = "Puno",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 22,
                            Nombre = "San Martín",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 23,
                            Nombre = "Tacna",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 24,
                            Nombre = "Tumbes",
                            PaisId = 1
                        },
                        new
                        {
                            Id = 25,
                            Nombre = "Ucayali",
                            PaisId = 1
                        });
                });

            modelBuilder.Entity("nest.core.dominio.General.Distrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("distrito", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Arequipa",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Alto Selva Alegre",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Cayma",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Characato",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Chiguata",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Jacobo Hunter",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "La Joya",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Miraflores",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Mollebaya",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Sabandía",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "San Juan de Siguas",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "San Juan de Tarucani",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Santa Isabel de Siguas",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Santa Rita de Siguas",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Sachaca",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "Simón Bolívar",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "Tiabaya",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "Yanahuara",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "Cerro Colorado",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 20,
                            Nombre = "Quequeña",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 21,
                            Nombre = "Yura",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 22,
                            Nombre = "Socabaya",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 23,
                            Nombre = "Polobaya",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 24,
                            Nombre = "Vitor",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 25,
                            Nombre = "La Unión",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 26,
                            Nombre = "Santa Teresa",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 27,
                            Nombre = "Aplao",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 28,
                            Nombre = "Chivay",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 29,
                            Nombre = "Ichuña",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 30,
                            Nombre = "Macate",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 31,
                            Nombre = "Huambo",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 32,
                            Nombre = "Orcopampa",
                            ProvinciaId = 1
                        },
                        new
                        {
                            Id = 33,
                            Nombre = "Chivay",
                            ProvinciaId = 1
                        });
                });

            modelBuilder.Entity("nest.core.dominio.General.DocumentoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoEstatal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("documentotipo", "dbo");
                });

            modelBuilder.Entity("nest.core.dominio.General.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoIso")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CodigoTelefono")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("pais", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodigoIso = "PE",
                            CodigoTelefono = "+51",
                            Nombre = "Perú"
                        },
                        new
                        {
                            Id = 2,
                            CodigoIso = "US",
                            CodigoTelefono = "+1",
                            Nombre = "Estados Unidos"
                        },
                        new
                        {
                            Id = 3,
                            CodigoIso = "MX",
                            CodigoTelefono = "+52",
                            Nombre = "México"
                        },
                        new
                        {
                            Id = 4,
                            CodigoIso = "AR",
                            CodigoTelefono = "+54",
                            Nombre = "Argentina"
                        },
                        new
                        {
                            Id = 5,
                            CodigoIso = "CL",
                            CodigoTelefono = "+56",
                            Nombre = "Chile"
                        },
                        new
                        {
                            Id = 6,
                            CodigoIso = "CO",
                            CodigoTelefono = "+57",
                            Nombre = "Colombia"
                        },
                        new
                        {
                            Id = 7,
                            CodigoIso = "ES",
                            CodigoTelefono = "+34",
                            Nombre = "España"
                        },
                        new
                        {
                            Id = 8,
                            CodigoIso = "BR",
                            CodigoTelefono = "+55",
                            Nombre = "Brasil"
                        },
                        new
                        {
                            Id = 9,
                            CodigoIso = "EC",
                            CodigoTelefono = "+593",
                            Nombre = "Ecuador"
                        },
                        new
                        {
                            Id = 10,
                            CodigoIso = "CA",
                            CodigoTelefono = "+1",
                            Nombre = "Canadá"
                        },
                        new
                        {
                            Id = 11,
                            CodigoIso = "FR",
                            CodigoTelefono = "+33",
                            Nombre = "Francia"
                        },
                        new
                        {
                            Id = 12,
                            CodigoIso = "GB",
                            CodigoTelefono = "+44",
                            Nombre = "Reino Unido"
                        },
                        new
                        {
                            Id = 13,
                            CodigoIso = "IT",
                            CodigoTelefono = "+39",
                            Nombre = "Italia"
                        },
                        new
                        {
                            Id = 14,
                            CodigoIso = "DE",
                            CodigoTelefono = "+49",
                            Nombre = "Alemania"
                        },
                        new
                        {
                            Id = 15,
                            CodigoIso = "JP",
                            CodigoTelefono = "+81",
                            Nombre = "Japón"
                        },
                        new
                        {
                            Id = 16,
                            CodigoIso = "CN",
                            CodigoTelefono = "+86",
                            Nombre = "China"
                        },
                        new
                        {
                            Id = 17,
                            CodigoIso = "IN",
                            CodigoTelefono = "+91",
                            Nombre = "India"
                        },
                        new
                        {
                            Id = 18,
                            CodigoIso = "AU",
                            CodigoTelefono = "+61",
                            Nombre = "Australia"
                        },
                        new
                        {
                            Id = 19,
                            CodigoIso = "ZA",
                            CodigoTelefono = "+27",
                            Nombre = "Sudáfrica"
                        },
                        new
                        {
                            Id = 20,
                            CodigoIso = "NZ",
                            CodigoTelefono = "+64",
                            Nombre = "Nueva Zelanda"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.General.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("provincia", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartamentoId = 4,
                            Nombre = "Arequipa"
                        },
                        new
                        {
                            Id = 2,
                            DepartamentoId = 4,
                            Nombre = "Camaná"
                        },
                        new
                        {
                            Id = 3,
                            DepartamentoId = 4,
                            Nombre = "Caravelí"
                        },
                        new
                        {
                            Id = 4,
                            DepartamentoId = 4,
                            Nombre = "Castilla"
                        },
                        new
                        {
                            Id = 5,
                            DepartamentoId = 4,
                            Nombre = "Caylloma"
                        },
                        new
                        {
                            Id = 6,
                            DepartamentoId = 4,
                            Nombre = "Condesuyos"
                        },
                        new
                        {
                            Id = 7,
                            DepartamentoId = 4,
                            Nombre = "Islay"
                        },
                        new
                        {
                            Id = 8,
                            DepartamentoId = 4,
                            Nombre = "La Unión"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.AlmacenEN.Almacen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DistritoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("DistritoId");

                    b.ToTable("almacen", "logistica");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Direccion = "Av. Default 1",
                            DistritoId = 1,
                            Latitud = 0m,
                            Longitud = 0m,
                            Nombre = "DEFAULT 1",
                            NombreCorto = "DEFAULT1"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Direccion = "Av. Default 2",
                            DistritoId = 1,
                            Latitud = 0m,
                            Longitud = 0m,
                            Nombre = "DEFAULT 2",
                            NombreCorto = "DEFAULT2"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Direccion = "Av. Default 3",
                            DistritoId = 1,
                            Latitud = 0m,
                            Longitud = 0m,
                            Nombre = "DEFAULT 3",
                            NombreCorto = "DEFAULT3"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.LogisticaTransaccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ES")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.ToTable("logisticatransaccion", "logistica");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ES = "E",
                            Nombre = "INGRESO POR COMPRA",
                            NombreCorto = "ICOMPRA"
                        },
                        new
                        {
                            Id = 2,
                            ES = "E",
                            Nombre = "INGRESO POR INICIO DE OPERACIONES",
                            NombreCorto = "IOPERAC"
                        },
                        new
                        {
                            Id = 3,
                            ES = "E",
                            Nombre = "INGRESO POR DIFERENCIA DE INVENTARIO",
                            NombreCorto = "IDIFINV"
                        },
                        new
                        {
                            Id = 4,
                            ES = "E",
                            Nombre = "INGRESO POR TRANFERENCIA",
                            NombreCorto = "ITRANSF"
                        },
                        new
                        {
                            Id = 5,
                            ES = "E",
                            Nombre = "INGRESO POR PRODUCCION",
                            NombreCorto = "IPRODUC"
                        },
                        new
                        {
                            Id = 101,
                            ES = "S",
                            Nombre = "SALIDA POR VENTA",
                            NombreCorto = "SVENTA"
                        },
                        new
                        {
                            Id = 102,
                            ES = "S",
                            Nombre = "SALIDA POR CIERRE DE OPERACIONES",
                            NombreCorto = "SOPERAC"
                        },
                        new
                        {
                            Id = 103,
                            ES = "S",
                            Nombre = "SALIDA POR DIFERENCIA DE INVENTARIO",
                            NombreCorto = "SDIFINV"
                        },
                        new
                        {
                            Id = 104,
                            ES = "S",
                            Nombre = "SALIDA POR TRANSFERENCIA",
                            NombreCorto = "STRANSF"
                        },
                        new
                        {
                            Id = 105,
                            ES = "E",
                            Nombre = "SALIDA POR PRODUCCION",
                            NombreCorto = "SPRODUC"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("Factor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("PuedeGenerarNuevosLotes")
                        .HasColumnType("bit");

                    b.Property<int>("UnidadMedidaCompraId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadMedidaConsumoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnidadMedidaCompraId");

                    b.HasIndex("UnidadMedidaConsumoId");

                    b.ToTable("producto", "logistica");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.ProductoLote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InventarioDetalleCreacionId")
                        .HasColumnType("bigint");

                    b.Property<int>("MonedaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PrecioConsumo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("SerialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonedaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("productolote", "logistica");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Transaccional.InventarioCabecera", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentoNumero")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DocumentoSerie")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DocumentoTipoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogisticaTransaccionId")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("DocumentoTipoId");

                    b.HasIndex("LogisticaTransaccionId");

                    b.ToTable("inventariocabecera", "logistica");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Transaccional.InventarioDetalle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<long>("InventarioCabeceraId")
                        .HasColumnType("bigint");

                    b.Property<short>("Item")
                        .HasColumnType("smallint");

                    b.Property<string>("Nota")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<long>("ProductoLoteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InventarioCabeceraId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ProductoLoteId");

                    b.ToTable("inventariodetalle", "logistica");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.UnidadMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("unidadmedida", "logistica");
                });

            modelBuilder.Entity("nest.core.dominio.Security.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "security");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "superadmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Security.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "security");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82ce97eb-3029-4536-aaf3-179216f3f1ea",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVezeuXs2XqhPUSgGiOsIYM4SCNZNB2q+iIlxjIOI+Qg2kiz4cJiGepq5SIe5oR7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac780e52-1e95-4cb2-9079-d9a4932983cb",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca20bfbf-a106-4b5a-b3c5-5edf345e04db",
                            Email = "superadmin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMA0TxImnMk4nP/IPL3RgXrVK1S63phpYNtdnxnN1R6qvj4NS/7r+ijr9gNZpGDcsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "327416fb-c0ab-426c-91b1-db1c87c16c5e",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@admin.com"
                        });
                });

            modelBuilder.Entity("nest.core.dominio.Security.Audit.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntidadId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntidadNombre")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasMaxLength(-1)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usuario")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("auditlog", "audit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("nest.core.dominio.Security.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("nest.core.dominio.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("nest.core.dominio.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("nest.core.dominio.Security.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("nest.core.dominio.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("nest.core.dominio.Aplicacion.Formulario.Formulario", b =>
                {
                    b.HasOne("nest.core.dominio.Aplicacion.Modulo.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Aplicacion.Formulario.Formulario", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Modulo");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nest.core.dominio.General.Departamento", b =>
                {
                    b.HasOne("nest.core.dominio.General.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("nest.core.dominio.General.Distrito", b =>
                {
                    b.HasOne("nest.core.dominio.General.Provincia", "Provincia")
                        .WithMany("Distritos")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("nest.core.dominio.General.Provincia", b =>
                {
                    b.HasOne("nest.core.dominio.General.Departamento", "Departamento")
                        .WithMany("Provincias")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.AlmacenEN.Almacen", b =>
                {
                    b.HasOne("nest.core.dominio.General.Distrito", "Distrito")
                        .WithMany()
                        .HasForeignKey("DistritoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Distrito");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Producto", b =>
                {
                    b.HasOne("nest.core.dominio.Logistica.UnidadMedida", "UnidadMedidaCompra")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaCompraId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Logistica.UnidadMedida", "UnidadMedidaConsumo")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaConsumoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UnidadMedidaCompra");

                    b.Navigation("UnidadMedidaConsumo");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.ProductoLote", b =>
                {
                    b.HasOne("nest.core.dominio.Finanzas.Moneda", "Moneda")
                        .WithMany()
                        .HasForeignKey("MonedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Logistica.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moneda");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Transaccional.InventarioCabecera", b =>
                {
                    b.HasOne("nest.core.dominio.Logistica.AlmacenEN.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.General.DocumentoTipo", "DocumentoTipo")
                        .WithMany()
                        .HasForeignKey("DocumentoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Logistica.LogisticaTransaccion", "LogisticaTransaccion")
                        .WithMany()
                        .HasForeignKey("LogisticaTransaccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Almacen");

                    b.Navigation("DocumentoTipo");

                    b.Navigation("LogisticaTransaccion");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Transaccional.InventarioDetalle", b =>
                {
                    b.HasOne("nest.core.dominio.Logistica.Transaccional.InventarioCabecera", "InventarioCabecera")
                        .WithMany("InventarioDetalles")
                        .HasForeignKey("InventarioCabeceraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Logistica.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("nest.core.dominio.Logistica.ProductoLote", "ProductoLote")
                        .WithMany()
                        .HasForeignKey("ProductoLoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("InventarioCabecera");

                    b.Navigation("Producto");

                    b.Navigation("ProductoLote");
                });

            modelBuilder.Entity("nest.core.dominio.Aplicacion.Formulario.Formulario", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("nest.core.dominio.General.Departamento", b =>
                {
                    b.Navigation("Provincias");
                });

            modelBuilder.Entity("nest.core.dominio.General.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("nest.core.dominio.General.Provincia", b =>
                {
                    b.Navigation("Distritos");
                });

            modelBuilder.Entity("nest.core.dominio.Logistica.Transaccional.InventarioCabecera", b =>
                {
                    b.Navigation("InventarioDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
